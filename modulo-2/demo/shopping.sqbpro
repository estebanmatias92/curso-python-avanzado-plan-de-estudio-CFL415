<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="G:/My Drive/Work/Educacion/CFL 415/Cursos/Programador en Python Avanzado en Ciencia de Datos/modulo-2/demo/shopping.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1497"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,9:mainEmployees"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="SQL 1">
-- Eliminar la tabla OrderItems si existe
DROP TABLE IF EXISTS OrderItems;
-- Eliminar la tabla Orders si existe
DROP TABLE IF EXISTS Orders;
-- Eliminar la tabla Products si existe
DROP TABLE IF EXISTS Products;
-- Eliminar la tabla Employees si existe
DROP TABLE IF EXISTS Employees;

-- Crear tabla Employees, dentro de la base de datos Shopping
CREATE TABLE IF NOT EXISTS Employees (
  EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,
  FirstName TEXT,
  LastName TEXT,
  Age INTEGER
);

-- Crear tabla Products
CREATE TABLE IF NOT EXISTS Products (
  ProductID INTEGER PRIMARY KEY AUTOINCREMENT,
  ProductName TEXT,
  Price REAL
);

-- Crear tabla Orders con clave foranea (depende de Employees)
CREATE TABLE IF NOT EXISTS Orders (
  OrderID INTEGER PRIMARY KEY AUTOINCREMENT,
  EmployeeID INTEGER,
  OrderDate DATE,
  FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);

-- Crear tabla OrderItems con claves for√°neas (depende de Employees y Orders)
CREATE TABLE IF NOT EXISTS OrderItems (
  OrderItemID INTEGER PRIMARY KEY AUTOINCREMENT,
  OrderID INTEGER,
  ProductID INTEGER,
  Quantity INTEGER,
  FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
  FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- Insertar datos en la tabla Employees
INSERT INTO Employees (FirstName, LastName, Age) 
VALUES 
('John', 'Doe', 30), 
('Jane', 'Doe', 32), 
('Alice', 'Johnson', 28), 
('Bob', 'Smith', 45);

-- Insertar datos en la tabla Products
INSERT INTO Products (ProductName, Price) 
VALUES 
('Apples', 1.20), 
('Bananas', 0.75), 
('Cherries', 2.00), 
('Dates', 3.00),
('Eclair', 2.50);

-- Insertar datos en la tabla Orders
INSERT INTO Orders (EmployeeID, OrderDate) 
VALUES 
(1, '2023-01-01'), 
(2, '2023-01-02'), 
(3, '2023-01-03'), 
(1, '2023-01-04'), 
(2, '2023-01-05');

-- Insertar datos en la tabla OrderItems
INSERT INTO OrderItems (OrderID, ProductID, Quantity) 
VALUES 
(1, 1, 10), 
(2, 2, 15), 
(3, 3, 20), 
(4, 4, 25), 
(5, 5, 30);</sql><sql name="SQL 2">
SELECT Orders.OrderID, Employees.FirstName, Employees.Age, Products.ProductName, OrderItems.Quantity
FROM (((Orders
INNER JOIN Employees 
ON Orders.EmployeeID = Employees.EmployeeID)
INNER JOIN OrderItems 
ON Orders.OrderID = OrderItems.OrderID)
INNER JOIN Products 
ON OrderItems.ProductID = Products.ProductID);</sql><current_tab id="1"/></tab_sql></sqlb_project>
